@page "/instanceevent"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Instance Event</PageTitle>

<!--
<div class="form-group">
    <label>
        Instance Domain:
        <input @bind="instanceDomain" />
    </label>
</div>
<div class="form-group">
    <label>
        Event Data:
        <input @bind="eventDatum" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>
-->

<ul id="messagesList">
    @foreach (var instanceEventDatum in instanceEventData)
    {
        <li>@instanceEventDatum</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> instanceEventData = [];
    private string? instanceDomain;
    private string? eventDatum;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/instanceeventhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (instanceDomain, eventDatum) =>
        {
            var encodedMsg = $"{instanceDomain}: {eventDatum}";
            instanceEventData.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", instanceDomain, eventDatum);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}